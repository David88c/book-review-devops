# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: rjm
---
# App config (non‑secret)
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: rjm
data:
  DB_NAME: appdb
  DOMAIN: rjm.local
---
# MySQL Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: rjm
spec:
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
---
# MySQL StatefulSet with persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: rjm
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: DB_NAME
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_PASSWORD
          readinessProbe:
            exec:
              command:
                [
                  "/bin/sh",
                  "-c",
                  "mysqladmin ping -h 127.0.0.1 -p$MYSQL_ROOT_PASSWORD",
                ]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                [
                  "/bin/sh",
                  "-c",
                  "mysqladmin ping -h 127.0.0.1 -p$MYSQL_ROOT_PASSWORD",
                ]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
---
# Backend Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: rjm
spec:
  selector:
    app: backend
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
# Backend Deployment (Spring Boot)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: rjm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: docker.io/david817/book-review-backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            # inject DB_NAME first (for expansion below)
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: DB_NAME
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://mysql:3306/$(DB_NAME)?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&createDatabaseIfNotExist=true"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_USER
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_PASSWORD
            - name: SERVER_PORT
              value: "8080"
            - name: ALLOWED_ORIGINS
              value: "http://rjm.local,http://localhost"
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 25
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: rjm
spec:
  replicas: 1
  selector:
    matchLabels: { app: frontend }
  template:
    metadata:
      labels: { app: frontend }
    spec:
      containers:
        - name: frontend
          image: docker.io/david817/book-review-frontend:latest
          # ↓↓↓ dev server על 3000
          env:
            - { name: HOST, value: "0.0.0.0" }
            - { name: PORT, value: "3000" }
            - { name: NODE_OPTIONS, value: "--max_old_space_size=1024" }
            - { name: REACT_APP_API_BASE_URL, value: "http://backend:8080" }
            - { name: VITE_API_BASE_URL, value: "http://backend:8080" }
          ports:
            - containerPort: 3000
          resources:
            requests: { cpu: "200m", memory: "512Mi" }
            limits: { cpu: "1", memory: "1Gi" }
          startupProbe:
            httpGet: { path: "/", port: 3000 }
            initialDelaySeconds: 40
            periodSeconds: 10
            failureThreshold: 12
          readinessProbe:
            httpGet: { path: "/", port: 3000 }
            initialDelaySeconds: 25
            periodSeconds: 10
            failureThreshold: 12
          livenessProbe:
            httpGet: { path: "/", port: 3000 }
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 6
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: rjm
spec:
  selector: { app: frontend }
  ports:
    - name: http
      port: 80
      targetPort: 3000 # ↓↓ חשוב: מפנה ל-3000

---
# Ingress (Minikube NGINX addon)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rjm
  namespace: rjm
spec:
  ingressClassName: nginx
  rules:
    - host: rjm.local
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8080
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
